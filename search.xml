<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>TCP-0-概览</title>
      <link href="/2023/07/21/TCP-0-%E6%A6%82%E8%A7%88/"/>
      <url>/2023/07/21/TCP-0-%E6%A6%82%E8%A7%88/</url>
      
        <content type="html"><![CDATA[<h1 id="TCP-0-概览"><a href="#TCP-0-概览" class="headerlink" title="TCP-0-概览"></a>TCP-0-概览</h1><h2 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h2><p>Reference：TCP&#x2F;IP Illustrated, Volume 1  Second Edition Chapter 12 Page 579~</p><p>在通信过程中，信道中的比特可能受损。</p><p>IP和UDP没有提供差错纠正，校验和和CRC只负责检查是否有差错，不尝试纠正。</p><p>解决信道中的比特可能受损的问题（分组问题），一般有两种解决方法：</p><ul><li>使用差错校正码 error-correcting codes</li><li>使用自动重复请求 Automatic Repeat Request (ARQ)</li></ul><p>通信协议一般使用ARQ，TCP使用ARQ。</p><h3 id="ARQ"><a href="#ARQ" class="headerlink" title="ARQ"></a>ARQ</h3><p>在多跳路由环境中，常见的问题可能并不是比特受损，更多的问题可能是分组问题，如分组的顺序混乱，分组重复，分组丢失等。</p><p>处理分组丢失的一个方法是重发分组直到其被正确接收</p><p>这里有两个问题</p><ol><li>接收方是否已经收到分组？</li><li>接收方收到的分组是否与之前发送方发送的一样？</li></ol><p>答案是使用 ACK (Acknowledgement)</p><p>最基本的实现是：</p><ul><li>发送方发送一个分组，等待一个ACK</li><li>接收方收到一个分组，回复对应的ACK</li><li>发送方收到回复的ACK后，发送新的分组</li></ul><p>但是这样会有新的问题:</p><ol><li>发送方对一个ACK等多久？</li><li>ACK丢失了怎么办？<br>对发送方而言，无法区分自己发送的分组丢失和ACK丢失，所以简单地处理即重新发送原分组，这样可能导致接收方分组重复。可以使用序列号(sequence number)，发送方为每一个分组添加序列号，接收方可以根据序列号判断是否为重复的分组，重复则直接丢弃。</li><li>如果分组被接收到了，但是有错怎么办？<br>校验和、CRC可以解决，他们使用比分组自身小很多的比特位可以检测到错误。(TCP使用校验和？)，当接收方检测到分组有错误时，不发送ACK</li></ol><p>to be continued</p>]]></content>
      
      
      
        <tags>
            
            <tag> tcp </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
